<?php

/**
 * This file is part of the mimmi20/mezzio-sample-project package.
 *
 * Copyright (c) 2021-2025, Thomas Mueller <mimmi20@live.de>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types = 1);

namespace Mezzio\Template;

use Laminas\View\Exception as ViewException;
use Laminas\View\Model\ModelInterface;

/**
 * Interface defining required template capabilities.
 */
interface TemplateRendererInterface
{
    /**
     * @const string Value indicating all templates; used with `addDefaultParam()`.
     */
    public const TEMPLATE_ALL = '*';

    /**
     * Render a template, optionally with parameters.
     *
     * Implementations MUST support the `namespace::template` naming convention,
     * and allow omitting the filename extension.
     *
     * @param array<string, mixed>|ModelInterface|object $params
     *
     * @throws Exception\RenderingException if it encounters a terminal child
     */
    public function render(string $name, $params = []): string;

    /**
     * Add a template path to the engine.
     *
     * Adds a template path, with optional namespace the templates in that path
     * provide.
     * @throws ViewException\InvalidArgumentException for an invalid path
     * @throws ViewException\InvalidArgumentException for an invalid namespace
     */
    public function addPath(string $path, ?string $namespace = null): void;

    /**
     * Retrieve configured paths from the engine.
     *
     * @return TemplatePath[]
     */
    public function getPaths(): array;

    /**
     * Add a default parameter to use with a template.
     *
     * Use this method to provide a default parameter to use when a template is
     * rendered. The parameter may be overridden by providing it when calling
     * `render()`, or by calling this method again with a null value.
     *
     * The parameter will be specific to the template name provided. To make
     * the parameter available to any template, pass the TEMPLATE_ALL constant
     * for the template name.
     *
     * If the default parameter existed previously, subsequent invocations with
     * the same template name and parameter name will overwrite.
     *
     * @param string $templateName name of template to which the param applies; use TEMPLATE_ALL to apply to all templates
     * @param string $param param name
     * @throws Exception\InvalidArgumentException
     */
    public function addDefaultParam(string $templateName, string $param, mixed $value): void;
}
